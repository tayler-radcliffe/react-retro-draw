{"version":3,"sources":["components/Header.js","components/Cell.js","utils/index.js","components/Palette.js","components/Grid.js","components/ActionPanel.js","components/App.js","index.js"],"names":["Header","className","Cell","props","color","isActive","handleClick","onClick","style","backgroundColor","COLORS","buildCellList","cellList","i","push","Palette","activeColor","setActiveColor","map","index","key","Grid","setCellList","cell","idx","copy","ActionPanel","newCellList","console","log","App","useState","_setCellList","localStorage","setItem","JSON","stringify","setCellListOnLocal","useEffect","parse","getItem","getCellListFromLocal","ReactDOM","render","document","getElementById"],"mappings":"6KAYeA,EANA,WACb,OAAO,4BAAQC,UAAU,UACvB,4CCeWC,EAZF,SAACC,GACZ,IAAMC,EAAQD,EAAMC,MACdC,EAAWF,EAAME,SACjBC,EAAcH,EAAMG,YAE1B,OAAQ,yBAAKL,UAAWI,EAAW,cAAgB,OACnDE,QAASD,EACTE,MAAO,CACHC,gBAAiBL,MCfVM,EAAS,CACpB,MACA,SACA,SACA,QACA,OACA,SACA,QACA,SAOK,SAASC,IAGd,IAFA,IAAMC,EAAW,GAERC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAASE,KAAK,CACZV,MAAO,OAIX,OAAOQ,ECjBT,IA0BeG,EA1BC,SAACZ,GACf,IAAMa,EAAcb,EAAMa,YACpBC,EAAiBd,EAAMc,eAW7B,OACE,yBAAKhB,UAAU,WACZS,EAAOQ,KAAI,SAACd,EAAOe,GAClB,OAAO,kBAAC,EAAD,CAAMC,IAAiBD,EAC9Bf,MAAOA,EACPC,SAAUD,IAAUY,EACpBV,YAAa,WACX,OAAOW,EAAeb,W,OCRjBiB,EAnBF,SAAClB,GACZ,IAAMa,EAAcb,EAAMa,YACpBM,EAAcnB,EAAMmB,YACpBV,EAAWT,EAAMS,SAEvB,OAAO,yBAAKX,UAAU,QACjBW,EAASM,KAAI,SAACK,EAAMC,GACnB,OAAO,kBAAC,EAAD,CAAMJ,IAAcI,EAC3BpB,MAAOmB,EAAKnB,MACZE,YAAa,WACX,IAAImB,EAAI,YAAOb,GACfa,EAAKD,GAAKpB,MAAQY,EAClBM,EAAYG,WCwBPC,EA/BK,SAACvB,GACnB,IAAMa,EAAcb,EAAMa,YACpBJ,EAAWT,EAAMS,SACjBU,EAAcnB,EAAMmB,YAE1B,OAAO,yBAAKrB,UAAU,gBAEpB,4BAAQM,QAAS,WACf,IAAMoB,EAAchB,IACpBW,EAAYK,KAFd,aAKA,4BAAQpB,QAAS,WACf,IAAMoB,EAAchB,IACpBgB,EAAYT,KAAI,SAACK,GACfA,EAAKnB,MAAQY,KAEfM,EAAYK,KALd,YAQA,4BAAQpB,QAAS,WACb,IAAMoB,EAAcf,EAASM,KAAI,SAACK,EAAMC,GAEtC,OADAD,EAAKnB,MAAQwB,QAAQC,IAAIN,EAAKnB,OAASmB,EAAKnB,MAAQY,EAC7CO,KACPD,EAAYK,KAJlB,gBC0BWG,EA1BH,WAAO,IAAD,EAEsBC,mBAASrB,EAAO,IAFtC,mBAETM,EAFS,KAEIC,EAFJ,OAGiBc,mBAASpB,IAAiB,IAH3C,mBAGTC,EAHS,KAGCoB,EAHD,KAKhB,SAASV,EAAYK,IAVI,SAACf,GAC1BqB,aAAaC,QAAQ,WAAYC,KAAKC,UAAUxB,IAU9CyB,CAAmBV,GACnBK,EAAaL,GAOf,OAJAW,qBAAU,WACRN,EA1ByB,WAC3B,IAAIpB,EAAWuB,KAAKI,MAAMN,aAAaO,QAAQ,aAE/C,OAAI5B,GAIGD,IAmBQ8B,MACZ,IAEI,yBAAKxC,UAAU,OAEpB,kBAAC,EAAD,MAEA,kBAAC,EAAD,CAASe,YAAaA,EAAaC,eAAgBA,IAEnD,kBAAC,EAAD,CAAMD,YAAaA,EAAaJ,SAAUA,EAAUU,YAAaA,IAEjE,kBAAC,EAAD,CAAaN,YAAaA,EAAaJ,SAAUA,EAAUU,YAAaA,MC9C5EoB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,S","file":"static/js/main.63e64387.chunk.js","sourcesContent":["import React from 'react';\n\n/**\n * The Header is simply the main heading of the application,\n * no props... just a static file.\n */\nconst Header = () => {\n  return <header className=\"header\">\n    <h1>Retro Draw</h1>\n  </header>\n}\n\nexport default Header;","import React from 'react';\n\n/**\n * The Cell component represents the fundamental \"clickable object\" in\n * retro-draw, there will be <Cell /> in both Palette and Grid.\n * \n * Props passed in will include:\n * - color, which is the background color of the cell\n * - isActive, which will be set only on cells in the Palette\n * - handleClick, which will be a function to run when the cell has been clicked on \n */\nconst Cell = (props) => {\n  const color = props.color;\n  const isActive = props.isActive;\n  const handleClick = props.handleClick;\n  \n  return (<div className={isActive ? \"cell active\" : \"cell\"} \n  onClick={handleClick} \n  style={{ \n      backgroundColor: color }} />)\n}\n\n\nexport default Cell;","/**\n * COLORS should be an array of color strings,\n * approximately 8 of them.\n */\nexport const COLORS = [\n  'red',\n  'orange',\n  'yellow',\n  'green',\n  'blue',\n  'purple',\n  'white',\n  'black'\n];\n\n/**\n * buildCellList creates and returns an \n * array of empty cell objects\n */\nexport function buildCellList() {\n  const cellList = [];\n\n  for (let i = 0; i < 64; i++) {\n    cellList.push({\n      color: null\n    });\n  }\n\n  return cellList;\n}","import React from 'react';\nimport Cell from './Cell';\n\n/* Need to map over the COLORS array, so we pull them from ../utils */\nimport { COLORS } from '../utils';\n\n/**\n * The Palette component represents the interface for displaying\n * clickable color cells, and needs to communicate the activeColor\n * to other components. \n */\nconst Palette = (props) => {\n  const activeColor = props.activeColor;\n  const setActiveColor = props.setActiveColor;\n  /**\n   * For the template, you need to:\n   * - map over COLORS\n   * - return from the mapping function a <Cell /> which:\n   *    - has a unique key (you can use 'palette-' and the index of the color)\n   *    - has a prop of color equal to the color from the map\n   *    - has a prop of isActive equal to true if activeColor equals the color from the map\n   *    - has a prop of handleClick which is a function that calls setActiveColor, passing it \n   *      the color from the map\n   */\n  return (\n    <div className=\"palette\">\n      {COLORS.map((color, index) => {\n        return <Cell key={'palette-', index} \n        color={color}\n        isActive={color === activeColor ? true : false} \n        handleClick={() => {\n          return setActiveColor(color);}} />\n        })}\n    </div>\n)}\n\n\nexport default Palette;","import React from 'react';\nimport Cell from './Cell';\n\n\nconst Grid = (props) => {\n  const activeColor = props.activeColor;\n  const setCellList = props.setCellList;\n  const cellList = props.cellList;\n\n  return <div className=\"grid\">\n      {cellList.map((cell, idx) => {\n        return <Cell key={'grid-', idx} \n        color={cell.color}\n        handleClick={() => {\n          let copy = [...cellList];\n          copy[idx].color = activeColor;\n          setCellList(copy)}} />\n        })}\n    </div>\n}\n\n\n\nexport default Grid;","import React from 'react';\n\n/* Need to build a blank cell list when user clicks CLEAR ALL */\nimport { buildCellList } from '../utils';\n\n/**\n * The ActionPanel component represents the interface for updating the Grid\n * based on any number of buttons the user might click on.\n */\nconst ActionPanel = (props) => {\n  const activeColor = props.activeColor;\n  const cellList = props.cellList;\n  const setCellList = props.setCellList;\n\n  return <div className=\"action-panel\">\n\n    <button onClick={() => {\n      const newCellList = buildCellList();\n      setCellList(newCellList);\n    } }>clear all</button>\n\n    <button onClick={() => {\n      const newCellList = buildCellList();\n      newCellList.map((cell) => {\n        cell.color = activeColor;\n      });\n      setCellList(newCellList);\n    }}>fill all</button>\n\n    <button onClick={() => {\n        const newCellList = cellList.map((cell, idx) => { \n          cell.color ? console.log(cell.color) : cell.color = activeColor;\n          return cell; })\n          setCellList(newCellList);\n      }}>fill empty</button>\n\n\n  </div>\n}\n\nexport default ActionPanel;","import React, { useState, useEffect } from 'react';\n\nimport Header from './Header';\nimport Palette from './Palette';\nimport Grid from './Grid';\nimport ActionPanel from './ActionPanel';\n\n\nimport {\n  COLORS,\n  buildCellList\n} from '../utils';\n\n\nconst getCellListFromLocal = () => {\n  let cellList = JSON.parse(localStorage.getItem('cellList'));\n\n  if (cellList) {\n    return cellList;\n  }\n\n  return buildCellList();\n}\n\nconst setCellListOnLocal = (cellList) => {\n  localStorage.setItem('cellList', JSON.stringify(cellList));\n}\n\n\nconst App = () => {\n\n  const [activeColor, setActiveColor] = useState(COLORS[0]);\n  const [cellList, _setCellList] = useState(buildCellList(), []);\n\n  function setCellList(newCellList) {\n    setCellListOnLocal(newCellList);\n    _setCellList(newCellList);\n  }\n\n  useEffect(() => {\n    _setCellList(getCellListFromLocal());\n  }, [])\n\n  return <div className=\"app\">\n    {/* Header needs no props */}\n    <Header />\n    {/* Palette needs to be passed activeColor and setActiveColor */}\n    <Palette activeColor={activeColor} setActiveColor={setActiveColor}/>\n    {/* Grid needs to be passed activeColor, cellList, and setCellList */}\n    <Grid activeColor={activeColor} cellList={cellList} setCellList={setCellList}/>\n    {/* ActionPanel needs to be passed activeColor, cellList, and setCellList */}\n    <ActionPanel activeColor={activeColor} cellList={cellList} setCellList={setCellList}/>\n  </div>\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('app')\n)"],"sourceRoot":""}